{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template to deploy RandomPasswordGeneratorFunction",
    "Resources": {
      "RandomPasswordGeneratorFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "ZipFile": "const cfnresponse = require('cfn-response');\nconst crypto = require('crypto');\n\nexports.handler = (event, context) => {\n  console.log(`Received event: ${JSON.stringify(event)}`);\n\n  // Define the character sets\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const numbers = '0123456789';\n  const special = '!@#$%^&*()';\n\n  // Generate the random characters\n  const randomLowercase = lowercase[crypto.randomInt(lowercase.length)];\n  const randomUppercase = uppercase[crypto.randomInt(uppercase.length)];\n  const randomNumber = numbers[crypto.randomInt(numbers.length)];\n  const randomSpecial = special[crypto.randomInt(special.length)];\n\n  // Generate the rest of the password\n  const passwordLength = 32;\n  const charset = lowercase + uppercase + numbers + special;\n  let password = randomLowercase + randomUppercase + randomNumber + randomSpecial;\n  for (let i = password.length; i < passwordLength; i++) {\n    password += charset[crypto.randomInt(charset.length)];\n  }\n\n  // Shuffle the password characters\n  password = password.split('').sort(() => crypto.randomInt(2) - 1).join('');\n\n  // Return the generated password as an output of the custom resource\n  const responseData = { password };\n  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData);\n};"
          },
          "Handler": "index.handler",
          "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
          "Runtime": "nodejs14.x"
        }
      },
      "LambdaExecutionRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": ["lambda.amazonaws.com"] },
                "Action": ["sts:AssumeRole"]
              }
            ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          ]
        }
      }
    },
    "Outputs": {
      "RandomPasswordGeneratorFunctionArn": {
        "Value": { "Fn::GetAtt": ["RandomPasswordGeneratorFunction", "Arn"] },
        "Description": "ARN of the RandomPasswordGeneratorFunction"
      }
    }
  }
  